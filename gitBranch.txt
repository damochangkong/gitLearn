Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
HEAD说明：master是指向提交的，HEAD其实是指向master的，HEAD其实是指向当前分支的。
顾名思义即表示当前的分支是啥
我们把dev分支的工作成果合并到master分支上：git merge dev
删除dev2分支：git branch -d dev2
我们采取什么策略呢：
1. 本地开发创建一个dev分支进行开发
2. dev分支完成工作之后，何如master分支。
3. 删除dev分支。
---------本地的话是否有必要呢？
如果是远程呢？远程存在两个分支，一个master,一个dev。
1. 本地dev分支开发，对接远程的dev分支。始终保持同步。
2. 开发完成之后，通过git merge dev合并到master分支。使得dev的成果都能进入master。
3. 本地的master分支上的成果同步到远程的master分支上。
4. 本地删除dev分支。
---这样有什么好处呢？
dev分支负责？？？？？？？？？？？？？？？？？？？？？
-------本地两个分支文件冲突了怎么办：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。